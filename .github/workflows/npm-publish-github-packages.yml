# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Notes Application CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Static Code Analysis (ESLint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: src/package-lock.json

      - name: Install deps
        working-directory: src
        run: npm ci

      - name: Lint
        working-directory: src
        run: npm run lint

  unit:
    name: Unit Testing (Jest - models)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: src/package-lock.json

      - name: Install deps
        working-directory: src
        run: npm ci

      - name: Run unit tests
        working-directory: src
        run: npm run test:unit

  integration:
    name: Integration Testing (Jest - routes)
    runs-on: ubuntu-latest
    needs: lint
    services:
      mongo:
        image: mongo:6
        ports:
          - '27017:27017'
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })' || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: src/package-lock.json

      - name: Install deps
        working-directory: src
        run: npm ci

      - name: Run integration tests (with coverage)
        working-directory: src
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://127.0.0.1:27017/notes_test
        run: npm run test:integration

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: src/coverage/

  e2e:
    name: E2E Testing (Playwright)
    runs-on: ubuntu-latest
    needs: lint
    services:
      mongo:
        image: mongo:6
        ports:
          - '27017:27017'
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })' || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: src/package-lock.json

      - name: Install deps
        working-directory: src
        run: npm ci

      - name: Install Playwright browsers
        working-directory: src
        run: npx playwright install --with-deps

      - name: Start app
        working-directory: src
        env:
          PORT: 3000
          MONGODB_URI: mongodb://127.0.0.1:27017/notes_e2e
        run: |
          node app.js & echo $! > app.pid
          npx wait-on http://localhost:3000

      - name: Run Playwright tests
        working-directory: src
        env:
          BASE_URL: http://localhost:3000
        run: npm run test:e2e

      - name: Stop app
        if: always()
        working-directory: src
        run: kill $(cat app.pid) || true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: src/playwright-report/

  package:
    name: Build Artefact (on main)
    runs-on: ubuntu-latest
    needs: [unit, integration, e2e]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: src/package-lock.json

      - name: Install deps
        working-directory: src
        run: npm ci

      - name: Build deployable zip
        working-directory: src
        run: |
          zip -r app-artifact.zip app.js views routes models package.json package-lock.json .env.example

      - name: Upload app artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: src/app-artifact.zip
